{"version":3,"sources":["components/body/body.tsx","components/gallows/gallows.tsx","components/keyboard/keyboard.tsx","components/word/word.tsx","components/app/app.tsx","index.tsx"],"names":["Body","missesCount","won","className","classNames","maxMisses","Gallows","children","rows","Keyboard","onKeyPress","pressedKeys","map","row","i","key","includes","onClick","Word","word","showWord","characters","split","char","toUpperCase","App","useState","games","setGames","setMissesCount","correctCount","setCorrectCount","setPressedKeys","setWord","hintsCount","setHintsCount","uniqCharactersCount","Set","size","shouldShowHint","isGameOver","useEffect","fetch","then","response","json","data","useCallback","prevMissedCount","prevCorrectCount","onUseHint","hints","chars","filter","unusedChar","Math","floor","random","length","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78efe1a5.chunk.js","sourcesContent":["import classNames from \"classnames\";\nimport React from \"react\";\nimport { maxMisses } from \"../app/app\";\nimport \"./body.scss\";\n\nexport const Body = ({\n  missesCount = 0,\n  won,\n}: {\n  missesCount: number;\n  won: boolean;\n}) => {\n  return (\n    <div\n      className={classNames(\"body\", {\n        \"body--dead\": missesCount > maxMisses,\n        \"body--won\": won,\n      })}\n    >\n      <div\n        className={classNames(\"body__head\", {\n          \"body__head--missed\": missesCount > 0,\n          \"body__head--dead\": missesCount > maxMisses,\n        })}\n      />\n      <div\n        className={classNames(\"body__torso\", {\n          \"body__torso--missed\": missesCount > 1,\n        })}\n      >\n        <div\n          className={classNames(\"body__hand body__hand--left\", {\n            \"body__hand--missed\": missesCount > 2,\n          })}\n        />\n        <div\n          className={classNames(\"body__hand body__hand--right\", {\n            \"body__hand--missed\": missesCount > 3,\n          })}\n        />\n        <div\n          className={classNames(\"body__leg body__leg--left\", {\n            \"body__leg--missed\": missesCount > 4,\n          })}\n        />\n        <div\n          className={classNames(\"body__leg body__leg--right\", {\n            \"body__leg--missed\": missesCount > 5,\n          })}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./gallows.scss\";\n\nexport const Gallows = ({ children }: { children: React.ReactElement }) => {\n  return (\n    <div className=\"gallows\">\n      <div className=\"gallows__rope\" />\n      <div className=\"gallows__joist\" />\n      <div className=\"gallows__stand\" />\n      <div className=\"gallows__floor\" />\n      {children}\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport \"./keyboard.scss\";\n\nconst row1 = [\"Q\", \"W\", \"E\", \"R\", \"T\", \"Y\", \"U\", \"I\", \"O\", \"P\"];\nconst row2 = [\"A\", \"S\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\"];\nconst row3 = [\"Z\", \"X\", \"C\", \"V\", \"B\", \"N\", \"M\"];\nconst rows = [row1, row2, row3];\nexport const Keyboard = ({\n  onKeyPress,\n  pressedKeys,\n}: {\n  onKeyPress: (key: string) => void;\n  pressedKeys: Array<string>;\n}) => {\n  return (\n    <div className=\"keyboard\">\n      {rows.map((row, i) => (\n        <div className=\"keyboard__row\" key={i}>\n          {row.map((key) => (\n            <button\n              key={key}\n              className={classNames(\"keyboard__key\", {\n                \"keyboard__key--pressed\": pressedKeys.includes(key),\n              })}\n              onClick={() => onKeyPress(key)}\n            >\n              {key}\n            </button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nimport React from \"react\";\nimport \"./word.scss\";\n\nexport const Word = ({\n  pressedKeys,\n  word,\n  showWord,\n}: {\n  pressedKeys: Array<string>;\n  word: string;\n  showWord: boolean;\n}) => {\n  const characters = word.split(\"\");\n  return (\n    <div className=\"word\">\n      {characters.map((char, i) => (\n        <div\n          key={char + i}\n          className={classNames(\"word__char\", {\n            \"word__char--correct\":\n              pressedKeys.includes(char.toUpperCase()) || showWord,\n          })}\n        >\n          {pressedKeys.includes(char.toUpperCase()) || showWord ? char : \"\"}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Body } from \"../body/body\";\r\nimport { Gallows } from \"../gallows/gallows\";\r\nimport { Keyboard } from \"../keyboard/keyboard\";\r\nimport { Word } from \"../word/word\";\r\nimport \"./app.scss\";\r\n\r\nexport const maxMisses = 5;\r\nconst initialHints = 3;\r\nexport const App = () => {\r\n  const [games, setGames] = useState(1);\r\n  const [missesCount, setMissesCount] = useState(0);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n  const [pressedKeys, setPressedKeys] = useState<Array<string>>([]);\r\n  const [word, setWord] = useState<string>();\r\n  const [hintsCount, setHintsCount] = useState(initialHints);\r\n  const uniqCharactersCount = word ? new Set(word.split(\"\")).size : 0;\r\n  const shouldShowHint = missesCount > 3 && hintsCount >= 1;\r\n  const isGameOver =\r\n    missesCount > maxMisses || correctCount === uniqCharactersCount;\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://random-word-api.herokuapp.com/word?number=1\")\r\n      .then((response) => response.json())\r\n      .then((data) => setWord(data[0].toUpperCase()));\r\n  }, [games]);\r\n\r\n  const onKeyPress = useCallback(\r\n    (key: string) => {\r\n      setPressedKeys([...pressedKeys, key]);\r\n      if (word && !word.includes(key)) {\r\n        setMissesCount((prevMissedCount) => prevMissedCount + 1);\r\n      } else {\r\n        setCorrectCount((prevCorrectCount) => prevCorrectCount + 1);\r\n      }\r\n    },\r\n    [pressedKeys, word]\r\n  );\r\n\r\n  const onUseHint = useCallback(() => {\r\n    setHintsCount((hints) => hints - 1);\r\n    if (word) {\r\n      const chars = word\r\n        .split(\"\")\r\n        .filter((char) => !pressedKeys.includes(char));\r\n      let unusedChar = chars[Math.floor(Math.random() * chars.length)];\r\n\r\n      setPressedKeys([...pressedKeys, unusedChar]);\r\n      setCorrectCount((prevCorrectCount) => prevCorrectCount + 1);\r\n    }\r\n  }, [pressedKeys, word]);\r\n\r\n  const onRestartGame = () => {\r\n    setMissesCount(0);\r\n    setCorrectCount(0);\r\n    setPressedKeys([]);\r\n    setWord(undefined);\r\n    setHintsCount(initialHints);\r\n    setGames((games) => games + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {word ? (\r\n        <>\r\n          <h1>Hangman Game</h1>\r\n          <Gallows>\r\n            <Body\r\n              missesCount={missesCount}\r\n              won={correctCount === uniqCharactersCount}\r\n            />\r\n          </Gallows>\r\n          <Word pressedKeys={pressedKeys} word={word} showWord={isGameOver} />\r\n          {isGameOver ? (\r\n            <>\r\n              <h2>\r\n                {correctCount === uniqCharactersCount\r\n                  ? \"You won 🎉\"\r\n                  : \"You lost 😞\"}\r\n              </h2>\r\n              <button onClick={onRestartGame}>Try again</button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Keyboard pressedKeys={pressedKeys} onKeyPress={onKeyPress} />\r\n              {shouldShowHint && (\r\n                <button onClick={onUseHint}>\r\n                  you have {hintsCount} hint{hintsCount === 1 ? \"\" : \"s\"} 💡\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <span className=\"app__loading\">⚙️</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components/app/app\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}